services:
  # Grafana container
  grafana:
    image: grafana/grafana:12.3.0-18329792253-ubuntu
    container_name: grafana
    restart: always
    expose:
      - 3000
    environment:
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_ROOT_URL=http://localhost:80/grafana
    volumes:
      - grafana_data:/var/lib/grafana:rw
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/config.yaml:/etc/grafana/provisioning/dashboards/config.yaml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      internal_network:
        ipv4_address: 172.16.238.10
  
  # Prometheus container
  prometheus:
    image: prom/prometheus:v3.6.0
    container_name: prometheus
    expose:
      - 9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus:rw
    networks:
      internal_network:
        ipv4_address: 172.16.238.20

  # NGINX container and metrics exporter
  nginx:
    image: nginx:1.29
    container_name: nginx
    restart: always
    ports:
      - 80:80
    expose:
      - 8080 # For metrics extraction
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      internal_network:
        ipv4_address: 172.16.238.30

  # ASP.NET Core API
  api:
    build:
      context: ./csharp_api/Api PPS Csharp
      dockerfile: Dockerfile
    container_name: api
    restart: always
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - DISABLE_HTTPS_REDIRECT=true
      - ConnectionStrings__ApiVideojuegos=Host=postgresql;Port=5432;Database=default;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - CORS_ALLOWED_ORIGINS=http://localhost,http://localhost:4200
    depends_on:
      - postgresql
    expose:
      - 8080
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8080/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      internal_network:
        ipv4_address: 172.16.238.70

  # Angular SSR frontend
  frontend:
    build:
      context: ./Angular_front
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    environment:
      - PORT=4000
    depends_on:
      - api
    expose:
      - 4000
    networks:
      internal_network:
        ipv4_address: 172.16.238.80

  nginx_metrics:
    image: nginx/nginx-prometheus-exporter:1.5.0
    container_name: nginx_metrics
    expose:
      - 9113
    networks:
      internal_network:
        ipv4_address: 172.16.238.40

  # Database and metrics container (PostgreSQL)
  postgresql:
    image: postgres:17
    container_name: postgresql
    restart: always
    shm_size: 128mb # Shared memory cap (recommended by docs)
    expose:
      - 5432
    volumes:
      - postgresql_data:/var/lib/postgresql
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=default
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    networks:
      internal_network:
        ipv4_address: 172.16.238.50
  
  postgresql_metrics:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.18.1
    container_name: postgresql_metrics
    restart: always
    expose:
      - 9187
    environment:
      - DATA_SOURCE_URI=postgresql:5432/postgres?sslmode=disable
      - DATA_SOURCE_USER=${POSTGRES_USER}
      - DATA_SOURCE_PASS=${POSTGRES_PASSWORD}
    networks:
      internal_network:
        ipv4_address: 172.16.238.60

volumes:
  grafana_data:
  prometheus_data:
  postgresql_data:

networks:
  internal_network:
    name: internal_network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "172.16.238.0/24"
